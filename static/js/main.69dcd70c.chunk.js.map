{"version":3,"sources":["components/List.js","components/Sidebar.js","components/MyMap.js","App.js","registerServiceWorker.js","index.js"],"names":["List","_this","this","attractions","props","selectedPlace","react_default","a","createElement","className","map","attraction","index","key","tabIndex","onClick","listClick","src","icon","alt","concat","category","title","address","Component","Sidebar","_this$props","categories","visibleLocations","selectCategory","name","onChange","event","target","value","aria-label","components_List","href","index_es","faFoursquare","faCopyright","MyMap","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleState","photo","tip","setState","prevState","foursquareData","bestPhoto","state","onMapClick","showingInfoWindow","closeInfoWindow","x","window","matchMedia","gm_authFailure","mapError","prevProps","_this2","allLocations","length","CLIENT_ID","process","CLIENT_SECRET","forEach","location","fetch","vid","then","response","json","meta","code","Promise","reject","Error","venue","prefix","suffix","tips","groups","items","text","catch","e","console","log","bounds","google","maps","LatLngBounds","i","extend","markerClick","refs","activeMarker","mapLoaded","mapBounds","center","getCenter","dist","zoom","initialCenter","style","position","width","height","mapTypeControl","streetViewControl","zoomControl","matches","ref","marker","visible","onClose","faLightbulb","GoogleApiWrapper","apiKey","ReactGA","initialize","pageview","pathname","search","VENUE_COUNT","App","onMapError","googleMapLoaded","openInfoWindow","onListClick","markerRefs","current","onSelectCategory","selectedCategory","locations","push","React","createRef","fslocations","venues","cats","fsloc","loc","lat","lng","id","formattedAddress","includes","filter","components_Sidebar","components_MyMap","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","error","ReactDOM","render","src_App_0","document","getElementById","URL","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.69dcd70c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass List extends Component {\n  static propTypes = {\n    selectedPlace: PropTypes.object,\n    attractions: PropTypes.array.isRequired,\n    listClick: PropTypes.func.isRequired\n  }\n  render() {\n    const attractions = this.props.attractions\n    const selectedPlace = this.props.selectedPlace\n    return (\n      <ol className=\"attractions-list\">\n      {attractions.map((attraction, index) => (\n        <li key={index} tabIndex=\"0\" onClick={() => this.props.listClick(index)}>\n          <div><img src={attraction.icon} alt={`${attraction.category} icon`} className=\"cat-logo\"/><span>{attraction.title}</span></div>\n          <div className={`${selectedPlace.title === attraction.title ? \"address-show\" : \"address-hide\"}`}>{attraction.address}</div>\n        </li>\n      ))}\n      </ol>\n      )\n  }\n}\n\nexport default List","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFoursquare } from '@fortawesome/free-brands-svg-icons';\nimport { faCopyright } from '@fortawesome/free-solid-svg-icons';\nimport List from './List';\n\n\nclass Sidebar extends Component {\n  static propTypes = {\n    categories: PropTypes.array.isRequired,\n    visibleLocations: PropTypes.array.isRequired,\n    selectCategory: PropTypes.func.isRequired,\n    listClick: PropTypes.func.isRequired,\n    selectedPlace: PropTypes.object\n  }\n\n  render(){\n    const {categories, visibleLocations, selectCategory, listClick, selectedPlace} = this.props\n    return(\n      <div className=\"sidebar\">\n        <select name=\"categories\" className=\"attractions-select\" onChange={event => selectCategory(event.target.value)} aria-label=\"Select Venue Category\">\n          <option value=\"all\">Select Category</option>\n          {categories.map((category, index) => (\n            <option value={category} key={index}>\n            {category}\n          </option>\n          ))}\n        </select>\n        <List\n          selectedPlace={selectedPlace}\n          attractions={visibleLocations}\n          listClick={listClick}\n        />\n        <footer>\n          <p >POWERED BY <a href=\"https://developer.foursquare.com/\"><FontAwesomeIcon icon={faFoursquare} className=\"fs-logo\"/></a></p>\n          <p><FontAwesomeIcon icon={faCopyright}/> 2018 SARA SALEEM. ALL RIGHTS RESERVED</p>\n        </footer>\n      </div>\n      )\n  }\n}\n\nexport default Sidebar","import React, { Component } from 'react';\nimport {Map, InfoWindow, Marker, GoogleApiWrapper} from 'google-maps-react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faLightbulb } from '@fortawesome/free-regular-svg-icons'\n\n\nconst FS_API_ERR_FALLBACK = 'Sorry something went wrong with Foursquare API...';\n\nclass MyMap extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      foursquareData: {}\n    }\n    // media query in JS for map styling\n    this.x = window.matchMedia(\"(min-width: 768px)\");\n  }\n\n  handleState = (title, photo, tip) => this.setState(prevState => {\n      prevState.foursquareData[title] = { bestPhoto: photo, tip: tip };\n      return { state: prevState }\n    })\n\n  componentDidMount(){\n    // Google Maps API error handling registration\n    window.gm_authFailure = this.props.mapError;\n  }\n\n\n  componentDidUpdate(prevProps){\n    // Fetch venue deatils like top photo and top tip from Foursquare\n    if(this.props.allLocations.length !== prevProps.allLocations.length){\n      //Foursquare API credentials\n      const CLIENT_ID = `${process.env.REACT_APP_FS_CLIENT_ID}`;\n      const CLIENT_SECRET = `${process.env.REACT_APP_FS_CLIENT_SECRET}`;\n      this.props.allLocations.forEach((location) => {\n          fetch(`https://api.foursquare.com/v2/venues/${location.vid}?client_id=${CLIENT_ID}&client_secret=${CLIENT_SECRET}&v=20180323`)\n          .then(response => response.json())\n          .then(response => {\n              if(response.meta.code === 429) {\n                return Promise.reject(new Error('Foursquare Free Account Quota exceeded'));\n              }\n              else {\n                this.handleState(location.title, `${response.response.venue.bestPhoto.prefix}300${response.response.venue.bestPhoto.suffix}`, response.response.venue.tips.groups[0].items[0].text);\n              }\n          })\n          .catch(e => console.log(e));\n      });\n    }\n  }\n\n  // Close infowindow (if one is open) on map click\n  onMapClick = () => this.props.showingInfoWindow && this.props.closeInfoWindow()\n\n  // Calculate map bounds based on venues\n  mapBounds(){\n    let bounds = new this.props.google.maps.LatLngBounds();\n    for (var i = 0; i < this.props.allLocations.length; i++) {\n      bounds.extend(this.props.allLocations[i].location);\n    }\n    return bounds;\n  }\n\n  render() {\n    const {visibleLocations, markerClick, refs, activeMarker, showingInfoWindow, closeInfoWindow, selectedPlace, mapLoaded} = this.props;\n    const bounds = this.mapBounds();\n    const center = bounds.getCenter();\n    const styleMap = {\n      position: 'absolute',\n      width: '100%',\n      height: 'inherit'\n    }\n    return (\n      <div className=\"mapDiv\">{\n        !mapLoaded ? <p className=\"gmap-fail\">Ideally, you should see a map here! <br/>No map??? :( Sorry something went wrong with Google Maps API.</p> :\n        <Map\n          google={this.props.google}\n          zoom={11}\n          initialCenter={center}\n          bounds={bounds}\n          onClick={this.onMapClick}\n          style={styleMap}\n          mapTypeControl={false}\n          streetViewControl={false}\n          zoomControl={this.x.matches ? true: false}>\n          {visibleLocations.map((location, index) => (\n            <Marker\n                title={location.title}\n                position={location.location}\n                key={index}\n                icon={(showingInfoWindow && selectedPlace.title === location.title)? './img/starb.png' : './img/starg.png'}\n                onClick={markerClick}\n                ref={refs[index]}\n                className={\"marker\"}\n                />\n            )\n          )}\n          <InfoWindow\n            marker={activeMarker}\n            visible={showingInfoWindow}\n            onClose={closeInfoWindow}>\n              <div className=\"infowindow\">\n                <h3>{selectedPlace.title}</h3>\n                <div className=\"attraction-info\">\n                  {/* if Foursquare fetch is not complete or fetch failed, load fallback image and fallback text*/}\n                  <img src={(this.state.foursquareData[selectedPlace.title] && this.state.foursquareData[selectedPlace.title]['bestPhoto']) || './img/ohno.jpg'} alt={`${selectedPlace.title}`} className=\"attraction-img\"/>\n                  <p className=\"attraction-tip\"><FontAwesomeIcon icon={faLightbulb} className=\"bulb-logo\"/>  {(this.state.foursquareData[selectedPlace.title] && this.state.foursquareData[selectedPlace.title]['tip']) || FS_API_ERR_FALLBACK}</p>\n                </div>\n              </div>\n          </InfoWindow>\n\n        </Map>}\n      </div>\n    )\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: `${process.env.REACT_APP_GM_API_KEY}`\n})(MyMap)\n","import React, { Component } from 'react';\nimport ReactGA from 'react-ga';\nimport './App.scss';\nimport Sidebar from './components/Sidebar'\nimport MyMap from './components/MyMap'\n\n// Google analytics info\nReactGA.initialize('UA-129370123-4');\nReactGA.pageview(window.location.pathname + window.location.search);\n\n// Maximum number of venues displayed\nconst VENUE_COUNT = 2;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      locations: [],\n      categories: [],\n      showingInfoWindow: false,\n      activeMarker: {},\n      selectedPlace: {},\n      googleMapLoaded: true,\n      selectedCategory: 'all'\n    };\n    // Refs are used to store marker node references in an array and to link locations in sidebar with markers\n    this.markerRefs = [];\n    for(let i = 0; i < VENUE_COUNT; i++){\n      this.markerRefs.push(React.createRef());\n    }\n  }\n\n  // Fetch trending venues list through Foursquare API\n  componentDidMount(){\n    //Foursquare API credentials\n    const CLIENT_ID = `${process.env.REACT_APP_FS_CLIENT_ID}`;\n    const CLIENT_SECRET = `${process.env.REACT_APP_FS_CLIENT_SECRET}`;\n\n    fetch(`https://api.foursquare.com/v2/venues/explore?near=Tampa&section=trending&limit=${VENUE_COUNT}&client_id=${CLIENT_ID}&client_secret=${CLIENT_SECRET}&v=20180323`)\n    .then(response => response.json())\n    .then(response => {\n        let fslocations = response.response.groups[0].items;\n        let venues = [];\n        let cats = [];\n        // console.log(fslocations);\n        fslocations.forEach(fsloc => {\n          let loc = {};\n          loc['title'] = fsloc.venue.name;\n          loc['category'] = fsloc.venue.categories[0].name;\n          loc['location'] = {lat: fsloc.venue.location.lat, lng: fsloc.venue.location.lng} ;\n          loc['vid'] = fsloc.venue.id;\n          loc['icon'] = `${fsloc.venue.categories[0].icon.prefix}32${fsloc.venue.categories[0].icon.suffix}`;\n          loc['address'] = `${fsloc.venue.location.address}, ${fsloc.venue.location.formattedAddress[1]}`;\n          venues.push(loc);\n          !cats.includes(loc['category']) && cats.push(loc['category']);\n        })\n        this.setState({categories: cats, locations: venues});\n    })\n    .catch(e => console.log(e))\n  }\n\n  // Google map is not loaded successfully\n  onMapError = () => this.setState({ googleMapLoaded: false })\n\n  openInfoWindow = (props, marker) => {\n    this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    })\n  }\n\n  closeInfoWindow = () => {\n    this.setState({\n      showingInfoWindow: false,\n      activeMarker: null,\n      selectedPlace: {}\n    })\n  }\n\n  //retrieve the appropriate marker and props based on index of location clicked in sidebar\n  //indexes in filtered list of location correspond to indexs in markerRefs array\n  onListClick = index => {\n    this.state.googleMapLoaded && this.openInfoWindow(this.markerRefs[index].current.props, this.markerRefs[index].current.marker);\n  }\n\n\n  // When a venue category is selected from drop-down, close any open infowindow and update state\n  onSelectCategory = category => {\n    this.state.showingInfoWindow && this.closeInfoWindow();\n    this.setState({ selectedCategory: category});\n  }\n\n\n\n  render() {\n    let category = this.state.selectedCategory;\n    let visibleLocations = (category !== 'all') ? this.state.locations.filter(location => location.category === category) : this.state.locations;\n\n    return (\n      <div className=\"app\">\n        <header>\n          <h1 className=\"app-title\"><span>Trending</span> in Tampa Bay</h1>\n        </header>\n\n        <main>\n          <Sidebar\n            categories={this.state.categories}\n            visibleLocations={visibleLocations}\n            selectCategory={this.onSelectCategory}\n            listClick={this.onListClick}\n            selectedPlace={this.state.selectedPlace}\n          />\n          <MyMap\n            visibleLocations={visibleLocations}\n            markerClick={this.openInfoWindow}\n            refs={this.markerRefs}\n            activeMarker={this.state.activeMarker}\n            showingInfoWindow={this.state.showingInfoWindow}\n            closeInfoWindow={this.closeInfoWindow}\n            selectedPlace={this.state.selectedPlace}\n            allLocations={this.state.locations}\n            mapLoaded={this.state.googleMapLoaded}\n            mapError={this.onMapError}/>\n\n        </main>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}