{"version":3,"sources":["utils/foursquareAPI.js","components/List.js","components/Footer.js","components/Sidebar.js","components/MapFallback.js","components/InfoWindowDetail.js","components/MyMap.js","App.js","registerServiceWorker.js","index.js"],"names":["FS_LIST_API","concat","process","FS_VENUE_API","CLIENT_ID","CLIENT_SECRET","VENUE_COUNT","getCategories","locations","categories","forEach","loc","includes","push","List","_this$props","this","props","selectedPlace","attractions","listClick","react_default","a","createElement","className","map","attraction","index","key","tabIndex","onClick","src","icon","alt","category","title","address","Component","Footer","href","index_es","faFoursquare","faCopyright","Sidebar","visibleLocations","selectCategory","name","onChange","event","target","value","aria-label","components_List","components_Footer","MapFallback","InfoWindowDetail","photo","tip","faLightbulb","MyMap","state","foursquareData","x","window","matchMedia","styleMap","position","width","height","handleState","_this","setState","prevState","bestPhoto","onMapClick","showingInfoWindow","closeInfoWindow","gm_authFailure","mapError","prevProps","_this2","allLocations","length","location","fetch","vid","then","response","json","meta","code","Promise","reject","Error","venue","prefix","suffix","tips","groups","items","text","FSAPI","data","catch","e","console","log","bounds","google","maps","LatLngBounds","i","extend","markerClick","refs","activeMarker","mapLoaded","mapBounds","center","getCenter","dist","zoom","initialCenter","style","mapTypeControl","streetViewControl","zoomControl","matches","ref","marker","visible","onClose","components_InfoWindowDetail","components_MapFallback","GoogleApiWrapper","apiKey","ReactGA","initialize","pageview","pathname","search","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","googleMapLoaded","selectedCategory","onMapError","openInfoWindow","onListClick","markerRefs","current","onSelectCategory","React","createRef","fslocations","venues","fsloc","lat","lng","id","formattedAddress","filter","components_Sidebar","components_MyMap","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","error","ReactDOM","render","src_App_0","document","getElementById","URL","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.48323f15.chunk.js","sourcesContent":["const FS_LIST_API = `${process.env.REACT_APP_FS_API}`;\nconst FS_VENUE_API = `${process.env.REACT_APP_FS_VENUE_API}`;\nconst CLIENT_ID = `${process.env.REACT_APP_FS_CLIENT_ID}`;\nconst CLIENT_SECRET = `${process.env.REACT_APP_FS_CLIENT_SECRET}`;\n\nexport const FS_API_ERR_FALLBACK =\n  'Sorry something went wrong with Foursquare API...';\n\n// Maximum number of venues displayed\nexport const VENUE_COUNT = 10;\n\nexport const getVenueList = () => {\n  return fetch (\n    `${FS_LIST_API}&limit=${VENUE_COUNT}&client_id=${CLIENT_ID}&client_secret=${CLIENT_SECRET}&v=20180323`\n  )\n    .then (response => response.json ())\n    .then (response => {\n      let fslocations = response.response.groups[0].items;\n      let venues = [];\n      fslocations.forEach (fsloc => {\n        let loc = {};\n        loc['title'] = fsloc.venue.name;\n        loc['category'] = fsloc.venue.categories[0].name;\n        loc['location'] = {\n          lat: fsloc.venue.location.lat,\n          lng: fsloc.venue.location.lng,\n        };\n        loc['vid'] = fsloc.venue.id;\n        loc[\n          'icon'\n        ] = `${fsloc.venue.categories[0].icon.prefix}32${fsloc.venue.categories[0].icon.suffix}`;\n        loc[\n          'address'\n        ] = `${fsloc.venue.location.address}, ${fsloc.venue.location.formattedAddress[1]}`;\n        venues.push (loc);\n      });\n      return venues;\n    });\n};\n\nexport const getVenueDetails = location => {\n  return fetch (\n    `${FS_VENUE_API}${location.vid}?client_id=${CLIENT_ID}&client_secret=${CLIENT_SECRET}&v=20180323`\n  )\n    .then (response => response.json ())\n    .then (response => {\n      if (response.meta.code === 429) {\n        return Promise.reject (\n          new Error ('Foursquare Free Account Quota exceeded')\n        );\n      } else {\n        return {\n          title: location.title,\n          photo: `${response.response.venue.bestPhoto.prefix}300${response.response.venue.bestPhoto.suffix}`,\n          tip: response.response.venue.tips.groups[0].items[0].text,\n        };\n      }\n    });\n};\n\nexport const getCategories = locations => {\n  let categories = [];\n  locations.forEach (loc => {\n    !categories.includes (loc['category']) && categories.push (loc['category']);\n  });\n  return categories;\n};\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nclass List extends Component {\n  static propTypes = {\n    selectedPlace: PropTypes.object,\n    attractions: PropTypes.array.isRequired,\n    listClick: PropTypes.func.isRequired,\n  };\n  render () {\n    const {selectedPlace, attractions, listClick} = this.props;\n    return (\n      <ol className=\"attractions-list\">\n        {attractions.map ((attraction, index) => (\n          <li key={index} tabIndex=\"0\" onClick={() => listClick (index)}>\n            <div>\n              <img\n                src={attraction.icon}\n                alt={`${attraction.category} icon`}\n                className=\"cat-logo\"\n              />\n              <span>{attraction.title}</span>\n            </div>\n            <div\n              className={`${selectedPlace.title === attraction.title ? 'address-show' : 'address-hide'}`}\n            >\n              {attraction.address}\n            </div>\n          </li>\n        ))}\n      </ol>\n    );\n  }\n}\n\nexport default List;\n","import React, {Component} from 'react';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faFoursquare} from '@fortawesome/free-brands-svg-icons';\nimport {faCopyright} from '@fortawesome/free-solid-svg-icons';\n\nclass Footer extends Component {\n  render () {\n    return (\n      <footer>\n        <p>\n          POWERED BY\n          {' '}\n          <a href=\"https://developer.foursquare.com/\">\n            <FontAwesomeIcon icon={faFoursquare} className=\"fs-logo\" />\n          </a>\n        </p>\n        <p>\n          <FontAwesomeIcon icon={faCopyright} />\n          {' '}\n          2018 SARA SALEEM. ALL RIGHTS RESERVED\n        </p>\n      </footer>\n    );\n  }\n}\n\nexport default Footer;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport List from './List';\nimport Footer from './Footer';\n\nclass Sidebar extends Component {\n  static propTypes = {\n    categories: PropTypes.array.isRequired,\n    visibleLocations: PropTypes.array.isRequired,\n    selectCategory: PropTypes.func.isRequired,\n    listClick: PropTypes.func.isRequired,\n    selectedPlace: PropTypes.object,\n  };\n\n  render () {\n    const {\n      categories,\n      visibleLocations,\n      selectCategory,\n      listClick,\n      selectedPlace,\n    } = this.props;\n    return (\n      <div className=\"sidebar\">\n        <select\n          name=\"categories\"\n          className=\"attractions-select\"\n          onChange={event => selectCategory (event.target.value)}\n          aria-label=\"Select Venue Category\"\n        >\n          <option value=\"all\">Select Category</option>\n          {categories.map ((category, index) => (\n            <option value={category} key={index}>\n              {category}\n            </option>\n          ))}\n        </select>\n        <List\n          selectedPlace={selectedPlace}\n          attractions={visibleLocations}\n          listClick={listClick}\n        />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default Sidebar;\n","import React, {Component} from 'react';\n\nclass MapFallback extends Component {\n  render () {\n    return (\n      <p className=\"gmap-fail\">\n        Ideally, you should see a map here!\n        {' '}\n        <br />\n        No map??? :( Sorry something went wrong with Google Maps API.\n      </p>\n    );\n  }\n}\n\nexport default MapFallback;\n","import React, {Component} from 'react';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faLightbulb} from '@fortawesome/free-regular-svg-icons';\n\nclass InfoWindowDetail extends Component {\n  render () {\n    const {title, photo, tip} = this.props;\n    return (\n      <div className=\"infowindow\">\n        <h3>{title}</h3>\n        <div className=\"attraction-info\">\n          <img src={photo} alt={`${title}`} className=\"attraction-img\" />\n          <p className=\"attraction-tip\">\n            <FontAwesomeIcon icon={faLightbulb} className=\"bulb-logo\" />\n            {' '}{' '}{tip}\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default InfoWindowDetail;\n","import React, {Component} from 'react';\nimport {Map, InfoWindow, Marker, GoogleApiWrapper} from 'google-maps-react';\nimport * as FSAPI from '../utils/foursquareAPI';\nimport MapFallback from './MapFallback';\nimport InfoWindowDetail from './InfoWindowDetail';\n\nclass MyMap extends Component {\n  state = {\n    foursquareData: {},\n  };\n  // media query in JS for map styling\n  x = window.matchMedia ('(min-width: 768px)');\n  styleMap = {\n    position: 'absolute',\n    width: '100%',\n    height: 'inherit',\n  };\n\n  handleState = (title, photo, tip) =>\n    this.setState (prevState => {\n      prevState.foursquareData[title] = {bestPhoto: photo, tip: tip};\n      return {state: prevState};\n    });\n\n  componentDidMount () {\n    // Google Maps API error handling registration\n    window.gm_authFailure = this.props.mapError;\n  }\n\n  componentDidUpdate (prevProps) {\n    // Fetch venue deatils like top photo and top tip from Foursquare\n    if (this.props.allLocations.length !== prevProps.allLocations.length) {\n      this.props.allLocations.forEach (location => {\n        FSAPI.getVenueDetails (location)\n          .then (data => this.handleState (data.title, data.photo, data.tip))\n          .catch (e => console.log (e));\n      });\n    }\n  }\n\n  // Close infowindow (if one is open) on map click\n  onMapClick = () =>\n    this.props.showingInfoWindow && this.props.closeInfoWindow ();\n\n  // Calculate map bounds based on venues\n  mapBounds () {\n    let bounds = new this.props.google.maps.LatLngBounds ();\n    for (var i = 0; i < this.props.allLocations.length; i++) {\n      bounds.extend (this.props.allLocations[i].location);\n    }\n    return bounds;\n  }\n\n  render () {\n    const {\n      visibleLocations,\n      markerClick,\n      refs,\n      activeMarker,\n      showingInfoWindow,\n      closeInfoWindow,\n      selectedPlace,\n      mapLoaded,\n    } = this.props;\n    const bounds = this.mapBounds ();\n    const center = bounds.getCenter ();\n\n    return (\n      <div className=\"mapDiv\">\n        {!mapLoaded\n          ? <MapFallback />\n          : <Map\n              google={this.props.google}\n              zoom={11}\n              initialCenter={center}\n              bounds={bounds}\n              onClick={this.onMapClick}\n              style={this.styleMap}\n              mapTypeControl={false}\n              streetViewControl={false}\n              zoomControl={this.x.matches ? true : false}\n            >\n              {visibleLocations.map ((location, index) => (\n                <Marker\n                  title={location.title}\n                  position={location.location}\n                  key={index}\n                  icon={\n                    showingInfoWindow && selectedPlace.title === location.title\n                      ? './img/starb.png'\n                      : './img/starg.png'\n                  }\n                  onClick={markerClick}\n                  ref={refs[index]}\n                  className={'marker'}\n                />\n              ))}\n              <InfoWindow\n                marker={activeMarker}\n                visible={showingInfoWindow}\n                onClose={closeInfoWindow}\n              >\n                <InfoWindowDetail\n                  title={selectedPlace.title}\n                  photo={\n                    (this.state.foursquareData[selectedPlace.title] &&\n                      this.state.foursquareData[selectedPlace.title][\n                        'bestPhoto'\n                      ]) ||\n                      './img/ohno.jpg'\n                  }\n                  tip={\n                    (this.state.foursquareData[selectedPlace.title] &&\n                      this.state.foursquareData[selectedPlace.title]['tip']) ||\n                      FSAPI.FS_API_ERR_FALLBACK\n                  }\n                />\n              </InfoWindow>\n            </Map>}\n      </div>\n    );\n  }\n}\n\nexport default GoogleApiWrapper ({\n  apiKey: `${process.env.REACT_APP_GM_API_KEY}`,\n}) (MyMap);\n","import React, {Component} from 'react';\nimport ReactGA from 'react-ga';\nimport * as FSAPI from './utils/foursquareAPI';\nimport Sidebar from './components/Sidebar';\nimport MyMap from './components/MyMap';\nimport './App.scss';\n\n// Google analytics info\nReactGA.initialize ('UA-129370123-4');\nReactGA.pageview (window.location.pathname + window.location.search);\n\nclass App extends Component {\n  constructor (props) {\n    super (props);\n    // Refs are used to store marker node references in an array and to link locations in sidebar with markers\n    this.markerRefs = [];\n    for (let i = 0; i < FSAPI.VENUE_COUNT; i++) {\n      this.markerRefs.push (React.createRef ());\n    }\n  }\n\n  state = {\n    locations: [],\n    showingInfoWindow: false,\n    activeMarker: {},\n    selectedPlace: {},\n    googleMapLoaded: true,\n    selectedCategory: 'all',\n  };\n\n  // Fetch trending venues list through Foursquare API\n  componentDidMount () {\n    FSAPI.getVenueList ()\n      .then (locations => this.setState ({locations}))\n      .catch (e => console.log (e));\n  }\n\n  // Google map is not loaded successfully\n  onMapError = () => this.setState ({googleMapLoaded: false});\n\n  openInfoWindow = (props, marker) => {\n    this.setState ({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true,\n    });\n  };\n\n  closeInfoWindow = () => {\n    this.setState ({\n      showingInfoWindow: false,\n      activeMarker: null,\n      selectedPlace: {},\n    });\n  };\n\n  //retrieve the appropriate marker and props based on index of location clicked in sidebar\n  //indexes in filtered list of location correspond to indexs in markerRefs array\n  onListClick = index => {\n    this.state.googleMapLoaded &&\n      this.openInfoWindow (\n        this.markerRefs[index].current.props,\n        this.markerRefs[index].current.marker\n      );\n  };\n\n  // When a venue category is selected from drop-down, close any open infowindow and update state\n  onSelectCategory = category => {\n    this.state.showingInfoWindow && this.closeInfoWindow ();\n    this.setState ({selectedCategory: category});\n  };\n\n  render () {\n    let category = this.state.selectedCategory;\n    let visibleLocations = category !== 'all'\n      ? this.state.locations.filter (location => location.category === category)\n      : this.state.locations;\n\n    return (\n      <div className=\"app\">\n        <header>\n          <h1 className=\"app-title\"><span>Trending</span> in Tampa Bay</h1>\n        </header>\n\n        <main>\n          <Sidebar\n            categories={FSAPI.getCategories (this.state.locations)}\n            visibleLocations={visibleLocations}\n            selectCategory={this.onSelectCategory}\n            listClick={this.onListClick}\n            selectedPlace={this.state.selectedPlace}\n          />\n          <MyMap\n            visibleLocations={visibleLocations}\n            markerClick={this.openInfoWindow}\n            refs={this.markerRefs}\n            activeMarker={this.state.activeMarker}\n            showingInfoWindow={this.state.showingInfoWindow}\n            closeInfoWindow={this.closeInfoWindow}\n            selectedPlace={this.state.selectedPlace}\n            allLocations={this.state.locations}\n            mapLoaded={this.state.googleMapLoaded}\n            mapError={this.onMapError}\n          />\n\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render (<App />, document.getElementById ('root'));\nregisterServiceWorker ();\n"],"sourceRoot":""}