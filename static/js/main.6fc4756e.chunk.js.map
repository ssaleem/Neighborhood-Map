{"version":3,"sources":["components/List.js","components/Sidebar.js","components/MyMap.js","App.js","registerServiceWorker.js","index.js"],"names":["List","index","this","props","listClick","_this","attractions","selectedPlace","react_default","a","createElement","className","map","attraction","key","tabIndex","onClick","event","handleClick","src","icon","alt","concat","category","title","address","Component","library","add","faFoursquare","faCopyright","Sidebar","_this$props","categories","visibleLocations","selectCategory","name","onChange","target","value","aria-label","components_List","href","react_fontawesome_index_es","faLightbulb","MyMap","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","foursquareData","x","window","matchMedia","handleState","bind","assertThisInitialized","onMapClick","photo","tip","setState","prevState","bestPhoto","gm_authFailure","mapError","prevProps","_this2","allLocations","length","CLIENT_ID","process","CLIENT_SECRET","forEach","location","fetch","vid","then","response","json","meta","code","Promise","reject","venue","prefix","suffix","tips","groups","items","text","catch","e","console","log","showingInfoWindow","closeInfoWindow","bounds","google","maps","LatLngBounds","i","extend","markerClick","refs","activeMarker","mapLoaded","mapBounds","center","getCenter","dist","zoom","initialCenter","style","position","width","height","mapTypeControl","streetViewControl","zoomControl","matches","ref","marker","visible","onClose","GoogleApiWrapper","apiKey","ReactGA","initialize","pageview","pathname","search","VENUE_COUNT","App","locations","googleMapLoaded","selectedCategory","markerRefs","push","React","createRef","openInfoWindow","onListClick","onSelectCategory","onMapError","fslocations","venues","cats","fsloc","loc","lat","lng","id","formattedAddress","includes","current","filter","components_Sidebar","components_MyMap","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","error","ReactDOM","render","src_App_0","document","getElementById","URL","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"oTAwBeA,sLApBFC,GACXC,KAAKC,MAAMC,UAAUH,oCAGb,IAAAI,EAAAH,KACFI,EAAcJ,KAAKC,MAAMG,YACzBC,EAAgBL,KAAKC,MAAMI,cACjC,OACCC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oBACZL,EAAYM,IAAI,SAACC,EAAYZ,GAAb,OAChBO,EAAAC,EAAAC,cAAA,MAAII,IAAKb,EAAOc,SAAS,IAAIC,QAAU,SAAAC,GAAK,OAAIZ,EAAKa,YAAYjB,KAChEO,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,OAAKS,IAAKN,EAAWO,KAAMC,IAAG,GAAAC,OAAKT,EAAWU,SAAhB,SAAiCZ,UAAU,aAAYH,EAAAC,EAAAC,cAAA,YAAOG,EAAWW,QAC5GhB,EAAAC,EAAAC,cAAA,OAAKC,UAAS,GAAAW,OAAKf,EAAciB,QAAUX,EAAWW,MAAQ,eAAiB,iBAAmBX,EAAWY,oBAdhGC,aCMnBC,IAAQC,IAAIC,IAAcC,SAoCXC,mLA1BN,IAAAC,EAC0E9B,KAAKC,MAA/E8B,EADAD,EACAC,WAAYC,EADZF,EACYE,iBAAkBC,EAD9BH,EAC8BG,eAAgB/B,EAD9C4B,EAC8C5B,UAAWG,EADzDyB,EACyDzB,cAChE,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACPH,EAAAC,EAAAC,cAAA,UAAQ0B,KAAK,aAAazB,UAAU,qBAAqB0B,SAAU,SAAApB,GAAK,OAAIkB,EAAelB,EAAMqB,OAAOC,QAAQC,aAAW,yBACzHhC,EAAAC,EAAAC,cAAA,UAAQ6B,MAAM,OAAd,mBACCN,EAAWrB,IAAI,SAACW,EAAUtB,GAAX,OACdO,EAAAC,EAAAC,cAAA,UAAQ6B,MAAOhB,EAAUT,IAAKb,GAC3BsB,MAIPf,EAAAC,EAAAC,cAAC+B,EAAD,CACClC,cAAeA,EACdD,YAAa4B,EACb9B,UAAW,SAACH,GAAD,OAAWG,EAAUH,MAElCO,EAAAC,EAAAC,cAAA,cACCF,EAAAC,EAAAC,cAAA,uBAAeF,EAAAC,EAAAC,cAAA,KAAGgC,KAAK,qCAAoClC,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAiBvB,KAAM,CAAC,MAAO,cAAeT,UAAU,cACnHH,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAiBvB,KAAK,cAAzB,mDA3BUM,6BCJtBC,IAAQC,IAAIgB,KAEZ,IAEMC,cAEJ,SAAAA,EAAY1C,GAAM,IAAAE,EAAA,OAAAyC,OAAAC,EAAA,EAAAD,CAAA5C,KAAA2C,IAChBxC,EAAAyC,OAAAE,EAAA,EAAAF,CAAA5C,KAAA4C,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAhD,KAAMC,KACDgD,MAAQ,CACXC,eAAgB,IAGlB/C,EAAKgD,EAAIC,OAAOC,WAAW,sBAE3BlD,EAAKmD,YAAcnD,EAAKmD,YAAYC,KAAjBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAzC,KACnBA,EAAKsD,WAAatD,EAAKsD,WAAWF,KAAhBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAzC,KATFA,2EAYNmB,EAAOoC,EAAOC,GACxB3D,KAAK4D,SAAS,SAAAC,GAEZ,OADAA,EAAUX,eAAe5B,GAAS,CAACwC,UAAWJ,EAAOC,IAAKA,GACnD,CAAEV,MAAOY,iDAMlBT,OAAOW,eAAiB/D,KAAKC,MAAM+D,oDAIlBC,GAAU,IAAAC,EAAAlE,KAE3B,GAAGA,KAAKC,MAAMkE,aAAaC,SAAWH,EAAUE,aAAaC,OAAO,CAElE,IAAMC,EAAS,GAAAjD,OAAMkD,oDACfC,EAAa,GAAAnD,OAAMkD,oDAEzBtE,KAAKC,MAAMkE,aAAaK,QAAQ,SAACC,GAE7BC,MAAK,wCAAAtD,OAAyCqD,EAASE,IAAlD,eAAAvD,OAAmEiD,EAAnE,mBAAAjD,OAA8FmD,EAA9F,gBACJK,KAAK,SAASC,GACX,OAAOA,EAASC,SAEnBF,KAAK,SAACC,GACH,GAA0B,MAAvBA,EAASE,KAAKC,KACf,OAAOC,QAAQC,OAAO,0CAGtBhB,EAAKZ,YAAYmB,EAASnD,MAA1B,GAAAF,OAAoCyD,EAASA,SAASM,MAAMrB,UAAUsB,OAAtE,OAAAhE,OAAkFyD,EAASA,SAASM,MAAMrB,UAAUuB,QAAUR,EAASA,SAASM,MAAMG,KAAKC,OAAO,GAAGC,MAAM,GAAGC,QAGnLC,MAAM,SAAAC,GAAC,OAAIC,QAAQC,IAAIF,6CAQ9B3F,KAAKC,MAAM6F,mBAAqB9F,KAAKC,MAAM8F,sDAM3C,IADA,IAAIC,EAAS,IAAIhG,KAAKC,MAAMgG,OAAOC,KAAKC,aAC/BC,EAAI,EAAGA,EAAIpG,KAAKC,MAAMkE,aAAaC,OAAQgC,IAClDJ,EAAOK,OAAOrG,KAAKC,MAAMkE,aAAaiC,GAAG3B,UAE3C,OAAOuB,mCAGA,IAAAlE,EACmH9B,KAAKC,MAAxH+B,EADAF,EACAE,iBAAkBsE,EADlBxE,EACkBwE,YAAaC,EAD/BzE,EAC+ByE,KAAMC,EADrC1E,EACqC0E,aAAcV,EADnDhE,EACmDgE,kBAAmBC,EADtEjE,EACsEiE,gBAAiB1F,EADvFyB,EACuFzB,cAAeoG,EADtG3E,EACsG2E,UACvGT,EAAShG,KAAK0G,YACdC,EAASX,EAAOY,YAMtB,OACEtG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACZgG,EACDnG,EAAAC,EAAAC,cAACqG,EAAA,IAAD,CACEZ,OAAQjG,KAAKC,MAAMgG,OACnBa,KAAM,GACNC,cAAeJ,EACfX,OAAQA,EACRlF,QAASd,KAAKyD,WACduD,MAdW,CACfC,SAAU,WACVC,MAAO,OACPC,OAAQ,WAYJC,gBAAgB,EAChBC,mBAAmB,EACnBC,cAAatH,KAAKmD,EAAEoE,SACnBvF,EAAiBtB,IAAI,SAAC+D,EAAU1E,GAAX,OACpBO,EAAAC,EAAAC,cAACqG,EAAA,OAAD,CACIvF,MAAOmD,EAASnD,MAChB2F,SAAUxC,EAASA,SACnB7D,IAAKb,EACLmB,KAAO4E,GAAqBzF,EAAciB,QAAUmD,EAASnD,MAAQ,kBAAoB,kBACzFR,QAASwF,EACTkB,IAAKjB,EAAKxG,GACVU,UAAW,aAIjBH,EAAAC,EAAAC,cAACqG,EAAA,WAAD,CACEY,OAAQjB,EACRkB,QAAS5B,EACT6B,QAAS5B,GACPzF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,UAAKH,EAAciB,OACnBhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAEbH,EAAAC,EAAAC,cAAA,OAAKS,IAAMjB,KAAKiD,MAAMC,eAAe7C,EAAciB,QAAUtB,KAAKiD,MAAMC,eAAe7C,EAAciB,OAAxC,WAAgE,iBAAkBH,IAAG,GAAAC,OAAKf,EAAciB,OAASb,UAAU,mBACxLH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAiBH,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAiBvB,KAAM,CAAC,MAAM,aAAcT,UAAU,cAApF,KAAqGT,KAAKiD,MAAMC,eAAe7C,EAAciB,QAAUtB,KAAKiD,MAAMC,eAAe7C,EAAciB,OAAxC,KAjH7I,yDAiFPhB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAb,uCAA6DH,EAAAC,EAAAC,cAAA,WAA7D,yEA/EDgB,aA0HLoG,6BAAiB,CAC9BC,OAAM,GAAAzG,OAAKkD,4CADEsD,CAEZjF,GC/HHmF,IAAQC,WAAW,kBACnBD,IAAQE,SAAS5E,OAAOqB,SAASwD,SAAW7E,OAAOqB,SAASyD,QAG5D,IAAMC,EAAc,GAmILC,cAhIb,SAAAA,EAAYnI,GAAO,IAAAE,EAAAyC,OAAAC,EAAA,EAAAD,CAAA5C,KAAAoI,IACjBjI,EAAAyC,OAAAE,EAAA,EAAAF,CAAA5C,KAAA4C,OAAAG,EAAA,EAAAH,CAAAwF,GAAApF,KAAAhD,KAAMC,KACDgD,MAAQ,CACXoF,UAAW,GACXtG,WAAY,GACZ+D,mBAAmB,EACnBU,aAAc,GACdnG,cAAe,GACfiI,iBAAiB,EACjBC,iBAAkB,OAIpBpI,EAAKqI,WAAa,GAClB,IAAI,IAAIpC,EAAI,EAAGA,EAAI+B,EAAa/B,IAC9BjG,EAAKqI,WAAWC,KAAKC,IAAMC,aAfZ,OAkBjBxI,EAAKyI,eAAiBzI,EAAKyI,eAAerF,KAApBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAzC,KACtBA,EAAK4F,gBAAkB5F,EAAK4F,gBAAgBxC,KAArBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAzC,KACvBA,EAAK0I,YAAc1I,EAAK0I,YAAYtF,KAAjBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAzC,KACnBA,EAAK2I,iBAAmB3I,EAAK2I,iBAAiBvF,KAAtBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAzC,KACxBA,EAAK4I,WAAa5I,EAAK4I,WAAWxF,KAAhBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAzC,KAtBDA,mFA0BA,IAAA+D,EAAAlE,KAEXqE,EAAS,GAAAjD,OAAMkD,oDACfC,EAAa,GAAAnD,OAAMkD,oDAEzBI,MAAK,kFAAAtD,OAAmF+G,EAAnF,eAAA/G,OAA4GiD,EAA5G,mBAAAjD,OAAuImD,EAAvI,gBACJK,KAAK,SAASC,GACT,OAAOA,EAASC,SAErBF,KAAK,SAACC,GACH,IAAImE,EAAcnE,EAASA,SAASU,OAAO,GAAGC,MAC1CyD,EAAS,GACTC,EAAO,GAEXF,EAAYxE,QAAQ,SAAA2E,GAClB,IAAIC,EAAM,GACVA,EAAG,MAAYD,EAAMhE,MAAMjD,KAC3BkH,EAAG,SAAeD,EAAMhE,MAAMpD,WAAW,GAAGG,KAC5CkH,EAAG,SAAe,CAACC,IAAKF,EAAMhE,MAAMV,SAAS4E,IAAKC,IAAKH,EAAMhE,MAAMV,SAAS6E,KAC5EF,EAAG,IAAUD,EAAMhE,MAAMoE,GACzBH,EAAG,KAAH,GAAAhI,OAAiB+H,EAAMhE,MAAMpD,WAAW,GAAGb,KAAKkE,OAAhD,MAAAhE,OAA2D+H,EAAMhE,MAAMpD,WAAW,GAAGb,KAAKmE,QAC1F+D,EAAG,QAAH,GAAAhI,OAAoB+H,EAAMhE,MAAMV,SAASlD,QAAzC,MAAAH,OAAqD+H,EAAMhE,MAAMV,SAAS+E,iBAAiB,IAC3FP,EAAOR,KAAKW,IACXF,EAAKO,SAASL,EAAG,WAAiBF,EAAKT,KAAKW,EAAG,YAElDlF,EAAKN,SAAS,CAAC7B,WAAYmH,EAAMb,UAAWY,MAE/CvD,MAAM,SAACC,GAAD,OAAOC,QAAQC,IAAIF,0CAK1B3F,KAAK4D,SAAS,CAAE0E,iBAAiB,2CAGpBrI,EAAOwH,GACpBzH,KAAK4D,SAAS,CACZvD,cAAeJ,EACfuG,aAAciB,EACd3B,mBAAmB,8CAKrB9F,KAAK4D,SAAS,CACZkC,mBAAmB,EACnBU,aAAc,KACdnG,cAAe,yCAMPN,GACVC,KAAKiD,MAAMqF,iBAAmBtI,KAAK4I,eAAe5I,KAAKwI,WAAWzI,GAAO2J,QAAQzJ,MAAOD,KAAKwI,WAAWzI,GAAO2J,QAAQjC,iDAKxGpG,GACfrB,KAAKiD,MAAM6C,mBAAqB9F,KAAK+F,kBACrC/F,KAAK4D,SAAS,CAAE2E,iBAAkBlH,qCAMlC,IAAIA,EAAWrB,KAAKiD,MAAMsF,iBACtBvG,EAAiC,QAAbX,EAAsBrB,KAAKiD,MAAMoF,UAAUsB,OAAO,SAAAlF,GAAQ,OAAIA,EAASpD,WAAaA,IAAYrB,KAAKiD,MAAMoF,UAEnI,OACE/H,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAYH,EAAAC,EAAAC,cAAA,wBAA1B,kBAGFF,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAACoJ,EAAD,CACE7H,WAAY/B,KAAKiD,MAAMlB,WACvBC,iBAAkBA,EAClBC,eAAgBjC,KAAK8I,iBACrB5I,UAAWF,KAAK6I,YAChBxI,cAAeL,KAAKiD,MAAM5C,gBAE5BC,EAAAC,EAAAC,cAACqJ,EAAD,CACE7H,iBAAkBA,EAClBsE,YAAatG,KAAK4I,eAClBrC,KAAMvG,KAAKwI,WACXhC,aAAcxG,KAAKiD,MAAMuD,aACzBV,kBAAmB9F,KAAKiD,MAAM6C,kBAC9BC,gBAAiB/F,KAAK+F,gBACtB1F,cAAeL,KAAKiD,MAAM5C,cAC1B8D,aAAcnE,KAAKiD,MAAMoF,UACzB5B,UAAWzG,KAAKiD,MAAMqF,gBACtBtE,SAAUhE,KAAK+I,sBAzHTvH,aCHZsI,EAAcC,QACW,cAA7B3G,OAAOqB,SAASuF,UAEe,UAA7B5G,OAAOqB,SAASuF,UAEhB5G,OAAOqB,SAASuF,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTvF,KAAK,SAAA2F,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBxH,QACfmH,UAAUC,cAAcO,WAK1BhF,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBH,MAAM,SAAAmF,GACLjF,QAAQiF,MAAM,4CAA6CA,KCzEjEC,IAASC,OAAOzK,EAAAC,EAAAC,cAACwK,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBd,UAAW,CAGzE,GADkB,IAAIe,IAAI7G,yBAAwBlB,OAAOqB,UAC3C2G,SAAWhI,OAAOqB,SAAS2G,OAIvC,OAGFhI,OAAOiI,iBAAiB,OAAQ,WAC9B,IAAMlB,EAAK,GAAA/I,OAAMkD,yBAAN,sBAEPwF,GAiDV,SAAiCK,GAE/BzF,MAAMyF,GACHvF,KAAK,SAAAC,GAGkB,MAApBA,EAASyG,SACuD,IAAhEzG,EAAS0G,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CrB,UAAUC,cAAcqB,MAAM9G,KAAK,SAAA2F,GACjCA,EAAaoB,aAAa/G,KAAK,WAC7BxB,OAAOqB,SAASmH,aAKpB1B,EAAgBC,KAGnBzE,MAAM,WACLE,QAAQC,IACN,mEArEAgG,CAAwB1B,GAIxBC,UAAUC,cAAcqB,MAAM9G,KAAK,WACjCgB,QAAQC,IACN,+GAMJqE,EAAgBC,MCzCxB2B","file":"static/js/main.6fc4756e.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass List extends Component {\n\n\thandleClick(index){\n\t\tthis.props.listClick(index)\n\t}\n\n\trender() {\n\t\tconst attractions = this.props.attractions\n\t\tconst selectedPlace = this.props.selectedPlace\n\t\treturn (\n\t\t\t<ol className=\"attractions-list\">\n\t\t\t\t{attractions.map((attraction, index) => (\n\t\t\t\t\t<li key={index} tabIndex=\"0\" onClick={(event => this.handleClick(index))}>\n\t\t\t\t\t\t<div><img src={attraction.icon} alt={`${attraction.category} icon`} className=\"cat-logo\"/><span>{attraction.title}</span></div>\n\t\t\t\t\t\t<div className={`${selectedPlace.title === attraction.title ? \"address-show\" : \"address-hide\"}`}>{attraction.address}</div>\n\t\t\t\t\t</li>\n\t\t\t\t))}\n\t\t\t</ol>\n\t\t\t)\n\t}\n}\n\nexport default List","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faFoursquare } from '@fortawesome/free-brands-svg-icons'\nimport { faCopyright } from '@fortawesome/free-solid-svg-icons'\nimport List from './List'\n\nlibrary.add(faFoursquare, faCopyright)\n\nclass Sidebar extends Component {\n\tstatic propTypes = {\n\t\tcategories: PropTypes.array.isRequired,\n        visibleLocations: PropTypes.array.isRequired,\n        selectCategory: PropTypes.func.isRequired,\n        listClick: PropTypes.func.isRequired,\n    }\n\n\trender(){\n\t\tconst {categories, visibleLocations, selectCategory, listClick, selectedPlace} = this.props\n\t\treturn(\n\t\t\t<div className=\"sidebar\">\n\t          <select name=\"categories\" className=\"attractions-select\" onChange={event => selectCategory(event.target.value)} aria-label=\"Select Venue Category\">\n\t            <option value=\"all\">Select Category</option>\n\t            {categories.map((category, index) => (\n\t              <option value={category} key={index}>\n\t                {category}\n\t              </option>\n\t            ))}\n\t          </select>\n\t          <List\n\t          \tselectedPlace={selectedPlace}\n\t            attractions={visibleLocations}\n\t            listClick={(index) => listClick(index)}\n\t          />\n\t          <footer>\n\t\t          <p >POWERED BY <a href=\"https://developer.foursquare.com/\"><FontAwesomeIcon icon={[\"fab\", \"foursquare\"]} className=\"fs-logo\"/></a></p>\n\t\t          <p><FontAwesomeIcon icon=\"copyright\"/> 2018 SARA SALEEM. ALL RIGHTS RESERVED</p>\n\t          </footer>\n\t        </div>\n\t\t)\n\t}\n}\n\nexport default Sidebar","import React, { Component } from 'react';\nimport {Map, InfoWindow, Marker, GoogleApiWrapper} from 'google-maps-react';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faLightbulb } from '@fortawesome/free-regular-svg-icons'\n\nlibrary.add(faLightbulb)\n\nconst FS_API_ERR_FALLBACK = 'Sorry something went wrong with Foursquare API...';\n\nclass MyMap extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      foursquareData: {}\n    }\n    // media query in JS for map styling\n    this.x = window.matchMedia(\"(min-width: 768px)\");\n    // setting context for 'this' inside methods to MyMap class\n    this.handleState = this.handleState.bind(this);\n    this.onMapClick = this.onMapClick.bind(this);\n  }\n\n  handleState(title, photo, tip) {\n    this.setState(prevState => {\n      prevState.foursquareData[title] = {bestPhoto: photo, tip: tip};\n      return { state: prevState}\n    })\n  }\n\n  componentDidMount(){\n    // Google Maps API error handling registration\n    window.gm_authFailure = this.props.mapError;\n  }\n\n\n  componentDidUpdate(prevProps){\n    //Fetch venue deatils like top photo and top tip from Foursquare\n    if(this.props.allLocations.length !== prevProps.allLocations.length){\n      //Foursquare API credentials\n      const CLIENT_ID = `${process.env.REACT_APP_FS_CLIENT_ID}`;\n      const CLIENT_SECRET = `${process.env.REACT_APP_FS_CLIENT_SECRET}`;\n      // let seq = Promise.resolve();\n      this.props.allLocations.forEach((location) => {\n        //seq = seq.then(() => {\n          fetch(`https://api.foursquare.com/v2/venues/${location.vid}?client_id=${CLIENT_ID}&client_secret=${CLIENT_SECRET}&v=20180323`)\n          .then(function(response) {\n              return response.json()\n          })\n          .then((response) => {\n              if(response.meta.code === 429) {\n                return Promise.reject('Foursquare Free Account Quota exceeded');\n              }\n              else {\n                this.handleState(location.title, `${response.response.venue.bestPhoto.prefix}300${response.response.venue.bestPhoto.suffix}`, response.response.venue.tips.groups[0].items[0].text);\n              }\n          })\n          .catch(e => console.log(e));\n        //});\n      });\n    }\n  }\n\n  // Close infowindow (if one is open) on map click\n  onMapClick(){\n    this.props.showingInfoWindow && this.props.closeInfoWindow();\n  }\n\n  //calculate map bounds based on venues\n  mapBounds(){\n    let bounds = new this.props.google.maps.LatLngBounds();\n    for (var i = 0; i < this.props.allLocations.length; i++) {\n      bounds.extend(this.props.allLocations[i].location);\n    }\n    return bounds;\n  }\n\n  render() {\n    const {visibleLocations, markerClick, refs, activeMarker, showingInfoWindow, closeInfoWindow, selectedPlace, mapLoaded} = this.props;\n    const bounds = this.mapBounds();\n    const center = bounds.getCenter();\n    const styleMap = {\n      position: 'absolute',\n      width: '100%',\n      height: 'inherit'\n    }\n    return (\n      <div className=\"mapDiv\">{\n        !mapLoaded ? <p className=\"gmap-fail\">Ideally, you should see a map here! <br/>No map??? :( Sorry something went wrong with Google Maps API.</p> :\n        <Map\n          google={this.props.google}\n          zoom={11}\n          initialCenter={center}\n          bounds={bounds}\n          onClick={this.onMapClick}\n          style={styleMap}\n          mapTypeControl={false}\n          streetViewControl={false}\n          zoomControl={this.x.matches ? true: false}>\n          {visibleLocations.map((location, index) => (\n            <Marker\n                title={location.title}\n                position={location.location}\n                key={index}\n                icon={(showingInfoWindow && selectedPlace.title === location.title)? './img/starb.png' : './img/starg.png'}\n                onClick={markerClick}\n                ref={refs[index]}\n                className={\"marker\"}\n                />\n            )\n          )}\n          <InfoWindow\n            marker={activeMarker}\n            visible={showingInfoWindow}\n            onClose={closeInfoWindow}>\n              <div className=\"infowindow\">\n                <h3>{selectedPlace.title}</h3>\n                <div className=\"attraction-info\">\n                  {/* if Foursquare fetch is not complete or fetch failed, load fallback image and fallback text*/}\n                  <img src={(this.state.foursquareData[selectedPlace.title] && this.state.foursquareData[selectedPlace.title]['bestPhoto']) || './img/ohno.jpg'} alt={`${selectedPlace.title}`} className=\"attraction-img\"/>\n                  <p className=\"attraction-tip\"><FontAwesomeIcon icon={[\"far\",\"lightbulb\"]} className=\"bulb-logo\"/>  {(this.state.foursquareData[selectedPlace.title] && this.state.foursquareData[selectedPlace.title]['tip']) || FS_API_ERR_FALLBACK}</p>\n                </div>\n              </div>\n          </InfoWindow>\n\n        </Map>}\n      </div>\n    )\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: `${process.env.REACT_APP_GM_API_KEY}`\n})(MyMap)\n","import React, { Component } from 'react';\nimport ReactGA from 'react-ga';\nimport './App.scss';\nimport Sidebar from './components/Sidebar'\nimport MyMap from './components/MyMap'\n\n// Google analytics info\nReactGA.initialize('UA-129370123-4');\nReactGA.pageview(window.location.pathname + window.location.search);\n\n//Maximum number of venues displayed\nconst VENUE_COUNT = 10;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      locations: [],\n      categories: [],\n      showingInfoWindow: false,\n      activeMarker: {},\n      selectedPlace: {},\n      googleMapLoaded: true,\n      selectedCategory: 'all'\n    };\n    // Refs are used to store marker node references in an array and to link locations in sidebar with markers\n    // more on refs => https://reactjs.org/docs/refs-and-the-dom.html\n    this.markerRefs = [];\n    for(let i = 0; i < VENUE_COUNT; i++){\n      this.markerRefs.push(React.createRef());\n    }\n    // setting context for 'this' inside methods to App class\n    this.openInfoWindow = this.openInfoWindow.bind(this);\n    this.closeInfoWindow = this.closeInfoWindow.bind(this);\n    this.onListClick = this.onListClick.bind(this);\n    this.onSelectCategory = this.onSelectCategory.bind(this);\n    this.onMapError = this.onMapError.bind(this);\n  }\n\n  //Fetch trending venues list through Foursquare API\n  componentDidMount(){\n    //Foursquare API credentials\n    const CLIENT_ID = `${process.env.REACT_APP_FS_CLIENT_ID}`;\n    const CLIENT_SECRET = `${process.env.REACT_APP_FS_CLIENT_SECRET}`;\n\n    fetch(`https://api.foursquare.com/v2/venues/explore?near=Tampa&section=trending&limit=${VENUE_COUNT}&client_id=${CLIENT_ID}&client_secret=${CLIENT_SECRET}&v=20180323`)\n    .then(function(response) {\n          return response.json()\n      })\n    .then((response) => {\n        let fslocations = response.response.groups[0].items;\n        let venues = [];\n        let cats = [];\n        // console.log(fslocations);\n        fslocations.forEach(fsloc => {\n          let loc = {};\n          loc['title'] = fsloc.venue.name;\n          loc['category'] = fsloc.venue.categories[0].name;\n          loc['location'] = {lat: fsloc.venue.location.lat, lng: fsloc.venue.location.lng} ;\n          loc['vid'] = fsloc.venue.id;\n          loc['icon'] = `${fsloc.venue.categories[0].icon.prefix}32${fsloc.venue.categories[0].icon.suffix}`;\n          loc['address'] = `${fsloc.venue.location.address}, ${fsloc.venue.location.formattedAddress[1]}`;\n          venues.push(loc);\n          !cats.includes(loc['category']) && cats.push(loc['category']);\n        })\n        this.setState({categories: cats, locations: venues});\n    })\n    .catch((e) => console.log(e))\n  }\n\n  //Google map is not loaded successfully\n  onMapError(){\n    this.setState({ googleMapLoaded: false })\n  }\n\n  openInfoWindow(props, marker){\n    this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    })\n  }\n\n  closeInfoWindow(){\n    this.setState({\n      showingInfoWindow: false,\n      activeMarker: null,\n      selectedPlace: {}\n    })\n  }\n\n  //retrieve the appropriate marker and props based on index of location clicked in sidebar\n  //indexes in filtered list of location correspond to indexs in markerRefs array\n  onListClick(index){\n    this.state.googleMapLoaded && this.openInfoWindow(this.markerRefs[index].current.props, this.markerRefs[index].current.marker);\n  }\n\n\n  // When a venue category is selected from drop-down, close any open infowindow and update state\n  onSelectCategory(category){\n    this.state.showingInfoWindow && this.closeInfoWindow();\n    this.setState({ selectedCategory: category});\n  }\n\n\n\n  render() {\n    let category = this.state.selectedCategory;\n    let visibleLocations = (category !== 'all') ? this.state.locations.filter(location => location.category === category) : this.state.locations;\n\n    return (\n      <div className=\"app\">\n        <header>\n          <h1 className=\"app-title\"><span>Trending</span> in Tampa Bay</h1>\n        </header>\n\n        <main>\n          <Sidebar\n            categories={this.state.categories}\n            visibleLocations={visibleLocations}\n            selectCategory={this.onSelectCategory}\n            listClick={this.onListClick}\n            selectedPlace={this.state.selectedPlace}\n          />\n          <MyMap\n            visibleLocations={visibleLocations}\n            markerClick={this.openInfoWindow}\n            refs={this.markerRefs}\n            activeMarker={this.state.activeMarker}\n            showingInfoWindow={this.state.showingInfoWindow}\n            closeInfoWindow={this.closeInfoWindow}\n            selectedPlace={this.state.selectedPlace}\n            allLocations={this.state.locations}\n            mapLoaded={this.state.googleMapLoaded}\n            mapError={this.onMapError}/>\n\n        </main>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}